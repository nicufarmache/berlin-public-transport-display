{"version":3,"sources":["Line.js","App.js","serviceWorker.js","index.js"],"names":["App","entry","this","props","dateDep","Date","when","DateNow","seconds","getTime","className","line","name","direction","Math","ceil","Component","api","state","station","loading","fetch","then","response","json","data","console","log","setState","loadData","setInterval","bind","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAGqBA,G,uLAET,IACDC,EAASC,KAAKC,MAAdF,MAEDG,EAAU,IAAIC,KAAKJ,EAAMK,MACzBC,EAAU,IAAIF,KACdG,GAAWJ,EAAQK,UAAYF,EAAQE,WAAa,IAE1D,OACE,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cAAcT,EAAMU,KAAKC,MACxC,yBAAKF,UAAU,mBAAmBT,EAAMY,WACxC,yBAAKH,UAAU,cACXF,EAAQ,GACN,qCAEFA,GAAS,GAAOA,EAAQ,MACtB,8BAAOM,KAAKC,KAAKP,EAAQ,IAAzB,QAEFA,GAAS,MACP,8BAAOM,KAAKC,KAAKP,EAAQ,GAAG,IAA5B,Y,GArBiBQ,cCC3BC,G,MACK,8DAGUjB,E,YACnB,WAAYG,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXC,QAAS,KACTC,SAAS,GAJM,E,wEAQP,IAAD,OACTC,MAAMJ,GACLK,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,UAAS,SAACV,GACb,MAAO,CAACC,QAASM,EAAML,SAAQ,W,0CAMnClB,KAAK2B,WACLC,YAAY5B,KAAK2B,SAASE,KAAK7B,MAAM,O,+BAG7B,IAAD,EACoBA,KAAKgB,MAAzBE,EADA,EACAA,QAASD,EADT,EACSA,QAEhB,OACE,yBAAKT,UAAU,QACXU,GAAWD,GACX,yBAAKT,UAAU,QACZS,EAAQa,KAAI,SAAA/B,GAAK,OAClB,kBAAC,EAAD,CAAMA,MAAOA,a,GAnCQe,aCIbiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.525e578b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Line.css';\n\nexport default class App extends Component {\n\n  render() {\n    const {entry} = this.props;\n\n    const dateDep = new Date(entry.when);\n    const DateNow = new Date();\n    const seconds = (dateDep.getTime() - DateNow.getTime()) / 1000;\n\n    return (\n      <div className=\"line\">\n          <div className=\"line__name\">{entry.line.name}</div>\n          <div className=\"line__direction\">{entry.direction}</div>\n          <div className=\"line__time\">\n            {(seconds<0) &&\n                <span>Now</span>\n            }\n            {(seconds>=0) && (seconds<3600) &&\n                <span>{Math.ceil(seconds/60)} min</span>\n            }\n            {(seconds>=3600) &&\n                <span>{Math.ceil(seconds/60/60)} h</span>\n            }\n          </div>\n      </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport Line from './Line';\nimport './App.css';\n\nconst api = {\n  station: 'https://3.vbb.transport.rest/stops/900000014104/departures'\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      station: null,\n      loading: true,\n    };\n  }\n\n  loadData() {\n    fetch(api.station)\n    .then(response => {\n      return response.json()\n    })\n    .then(data => {\n      console.log(data);\n      this.setState((state) => {\n        return {station: data, loading:false};\n      });\n    })\n  }\n\n  componentDidMount() {\n    this.loadData();\n    setInterval(this.loadData.bind(this),10000);\n  }\n\n  render() {\n    const {loading, station} = this.state;\n\n    return (\n      <div className='app'>\n        {!loading && station &&\n          <div className=\"list\">\n            {station.map(entry =>\n            <Line entry={entry} />\n            )}\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}